# coding: utf-8

"""
    Qase.io API

    Qase API Specification.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@qase.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Requirement(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'parent_id': 'int',
        'member_id': 'int',
        'title': 'str',
        'description': 'str',
        'status': 'str',
        'type': 'str',
        'created': 'datetime',
        'updated': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'parent_id': 'parent_id',
        'member_id': 'member_id',
        'title': 'title',
        'description': 'description',
        'status': 'status',
        'type': 'type',
        'created': 'created',
        'updated': 'updated'
    }

    def __init__(self, id=None, parent_id=None, member_id=None, title=None, description=None, status=None, type=None, created=None, updated=None):  # noqa: E501
        """Requirement - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._parent_id = None
        self._member_id = None
        self._title = None
        self._description = None
        self._status = None
        self._type = None
        self._created = None
        self._updated = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if parent_id is not None:
            self.parent_id = parent_id
        if member_id is not None:
            self.member_id = member_id
        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        if status is not None:
            self.status = status
        if type is not None:
            self.type = type
        if created is not None:
            self.created = created
        if updated is not None:
            self.updated = updated

    @property
    def id(self):
        """Gets the id of this Requirement.  # noqa: E501


        :return: The id of this Requirement.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Requirement.


        :param id: The id of this Requirement.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def parent_id(self):
        """Gets the parent_id of this Requirement.  # noqa: E501


        :return: The parent_id of this Requirement.  # noqa: E501
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this Requirement.


        :param parent_id: The parent_id of this Requirement.  # noqa: E501
        :type: int
        """

        self._parent_id = parent_id

    @property
    def member_id(self):
        """Gets the member_id of this Requirement.  # noqa: E501


        :return: The member_id of this Requirement.  # noqa: E501
        :rtype: int
        """
        return self._member_id

    @member_id.setter
    def member_id(self, member_id):
        """Sets the member_id of this Requirement.


        :param member_id: The member_id of this Requirement.  # noqa: E501
        :type: int
        """

        self._member_id = member_id

    @property
    def title(self):
        """Gets the title of this Requirement.  # noqa: E501


        :return: The title of this Requirement.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Requirement.


        :param title: The title of this Requirement.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this Requirement.  # noqa: E501


        :return: The description of this Requirement.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Requirement.


        :param description: The description of this Requirement.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def status(self):
        """Gets the status of this Requirement.  # noqa: E501


        :return: The status of this Requirement.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Requirement.


        :param status: The status of this Requirement.  # noqa: E501
        :type: str
        """
        allowed_values = ["valid", "draft", "review", "rework", "finish", "implemented", "not-testable", "obsolete"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def type(self):
        """Gets the type of this Requirement.  # noqa: E501


        :return: The type of this Requirement.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Requirement.


        :param type: The type of this Requirement.  # noqa: E501
        :type: str
        """
        allowed_values = ["epic", "user-story", "feature"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def created(self):
        """Gets the created of this Requirement.  # noqa: E501


        :return: The created of this Requirement.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Requirement.


        :param created: The created of this Requirement.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def updated(self):
        """Gets the updated of this Requirement.  # noqa: E501


        :return: The updated of this Requirement.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Requirement.


        :param updated: The updated of this Requirement.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Requirement, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Requirement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
