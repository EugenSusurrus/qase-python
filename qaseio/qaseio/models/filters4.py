# coding: utf-8

"""
    Qase.io API

    Qase API Specification.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@qase.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Filters4(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'run': 'str',
        'case_id': 'str',
        'member': 'str',
        'api': 'bool',
        'from_end_time': 'str',
        'to_end_time': 'str'
    }

    attribute_map = {
        'status': 'status',
        'run': 'run',
        'case_id': 'case_id',
        'member': 'member',
        'api': 'api',
        'from_end_time': 'from_end_time',
        'to_end_time': 'to_end_time'
    }

    def __init__(self, status=None, run=None, case_id=None, member=None, api=None, from_end_time=None, to_end_time=None):  # noqa: E501
        """Filters4 - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._run = None
        self._case_id = None
        self._member = None
        self._api = None
        self._from_end_time = None
        self._to_end_time = None
        self.discriminator = None
        if status is not None:
            self.status = status
        if run is not None:
            self.run = run
        if case_id is not None:
            self.case_id = case_id
        if member is not None:
            self.member = member
        if api is not None:
            self.api = api
        if from_end_time is not None:
            self.from_end_time = from_end_time
        if to_end_time is not None:
            self.to_end_time = to_end_time

    @property
    def status(self):
        """Gets the status of this Filters4.  # noqa: E501

        A single test run result status. Possible values: in_progress, passed, failed, blocked, skipped, invalid.   # noqa: E501

        :return: The status of this Filters4.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Filters4.

        A single test run result status. Possible values: in_progress, passed, failed, blocked, skipped, invalid.   # noqa: E501

        :param status: The status of this Filters4.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def run(self):
        """Gets the run of this Filters4.  # noqa: E501

        A list of run IDs separated by comma.  # noqa: E501

        :return: The run of this Filters4.  # noqa: E501
        :rtype: str
        """
        return self._run

    @run.setter
    def run(self, run):
        """Sets the run of this Filters4.

        A list of run IDs separated by comma.  # noqa: E501

        :param run: The run of this Filters4.  # noqa: E501
        :type: str
        """

        self._run = run

    @property
    def case_id(self):
        """Gets the case_id of this Filters4.  # noqa: E501

        A list of case IDs separated by comma.  # noqa: E501

        :return: The case_id of this Filters4.  # noqa: E501
        :rtype: str
        """
        return self._case_id

    @case_id.setter
    def case_id(self, case_id):
        """Sets the case_id of this Filters4.

        A list of case IDs separated by comma.  # noqa: E501

        :param case_id: The case_id of this Filters4.  # noqa: E501
        :type: str
        """

        self._case_id = case_id

    @property
    def member(self):
        """Gets the member of this Filters4.  # noqa: E501

        A list of member IDs separated by comma.  # noqa: E501

        :return: The member of this Filters4.  # noqa: E501
        :rtype: str
        """
        return self._member

    @member.setter
    def member(self, member):
        """Sets the member of this Filters4.

        A list of member IDs separated by comma.  # noqa: E501

        :param member: The member of this Filters4.  # noqa: E501
        :type: str
        """

        self._member = member

    @property
    def api(self):
        """Gets the api of this Filters4.  # noqa: E501


        :return: The api of this Filters4.  # noqa: E501
        :rtype: bool
        """
        return self._api

    @api.setter
    def api(self, api):
        """Sets the api of this Filters4.


        :param api: The api of this Filters4.  # noqa: E501
        :type: bool
        """

        self._api = api

    @property
    def from_end_time(self):
        """Gets the from_end_time of this Filters4.  # noqa: E501

        Will return all results created after provided datetime. Allowed format: `Y-m-d H:i:s`.   # noqa: E501

        :return: The from_end_time of this Filters4.  # noqa: E501
        :rtype: str
        """
        return self._from_end_time

    @from_end_time.setter
    def from_end_time(self, from_end_time):
        """Sets the from_end_time of this Filters4.

        Will return all results created after provided datetime. Allowed format: `Y-m-d H:i:s`.   # noqa: E501

        :param from_end_time: The from_end_time of this Filters4.  # noqa: E501
        :type: str
        """

        self._from_end_time = from_end_time

    @property
    def to_end_time(self):
        """Gets the to_end_time of this Filters4.  # noqa: E501

        Will return all results created before provided datetime. Allowed format: `Y-m-d H:i:s`.   # noqa: E501

        :return: The to_end_time of this Filters4.  # noqa: E501
        :rtype: str
        """
        return self._to_end_time

    @to_end_time.setter
    def to_end_time(self, to_end_time):
        """Sets the to_end_time of this Filters4.

        Will return all results created before provided datetime. Allowed format: `Y-m-d H:i:s`.   # noqa: E501

        :param to_end_time: The to_end_time of this Filters4.  # noqa: E501
        :type: str
        """

        self._to_end_time = to_end_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Filters4, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Filters4):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
