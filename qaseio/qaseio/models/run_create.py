# coding: utf-8

"""
    Qase.io API

    Qase API Specification.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@qase.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RunCreate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'description': 'str',
        'include_all_cases': 'bool',
        'cases': 'list[int]',
        'is_autotest': 'bool',
        'environment_id': 'int',
        'milestone_id': 'int',
        'plan_id': 'int',
        'tags': 'list[str]'
    }

    attribute_map = {
        'title': 'title',
        'description': 'description',
        'include_all_cases': 'include_all_cases',
        'cases': 'cases',
        'is_autotest': 'is_autotest',
        'environment_id': 'environment_id',
        'milestone_id': 'milestone_id',
        'plan_id': 'plan_id',
        'tags': 'tags'
    }

    def __init__(self, title=None, description=None, include_all_cases=None, cases=None, is_autotest=None, environment_id=None, milestone_id=None, plan_id=None, tags=None):  # noqa: E501
        """RunCreate - a model defined in Swagger"""  # noqa: E501
        self._title = None
        self._description = None
        self._include_all_cases = None
        self._cases = None
        self._is_autotest = None
        self._environment_id = None
        self._milestone_id = None
        self._plan_id = None
        self._tags = None
        self.discriminator = None
        self.title = title
        if description is not None:
            self.description = description
        if include_all_cases is not None:
            self.include_all_cases = include_all_cases
        if cases is not None:
            self.cases = cases
        if is_autotest is not None:
            self.is_autotest = is_autotest
        if environment_id is not None:
            self.environment_id = environment_id
        if milestone_id is not None:
            self.milestone_id = milestone_id
        if plan_id is not None:
            self.plan_id = plan_id
        if tags is not None:
            self.tags = tags

    @property
    def title(self):
        """Gets the title of this RunCreate.  # noqa: E501


        :return: The title of this RunCreate.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this RunCreate.


        :param title: The title of this RunCreate.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def description(self):
        """Gets the description of this RunCreate.  # noqa: E501


        :return: The description of this RunCreate.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RunCreate.


        :param description: The description of this RunCreate.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def include_all_cases(self):
        """Gets the include_all_cases of this RunCreate.  # noqa: E501


        :return: The include_all_cases of this RunCreate.  # noqa: E501
        :rtype: bool
        """
        return self._include_all_cases

    @include_all_cases.setter
    def include_all_cases(self, include_all_cases):
        """Sets the include_all_cases of this RunCreate.


        :param include_all_cases: The include_all_cases of this RunCreate.  # noqa: E501
        :type: bool
        """

        self._include_all_cases = include_all_cases

    @property
    def cases(self):
        """Gets the cases of this RunCreate.  # noqa: E501


        :return: The cases of this RunCreate.  # noqa: E501
        :rtype: list[int]
        """
        return self._cases

    @cases.setter
    def cases(self, cases):
        """Sets the cases of this RunCreate.


        :param cases: The cases of this RunCreate.  # noqa: E501
        :type: list[int]
        """

        self._cases = cases

    @property
    def is_autotest(self):
        """Gets the is_autotest of this RunCreate.  # noqa: E501


        :return: The is_autotest of this RunCreate.  # noqa: E501
        :rtype: bool
        """
        return self._is_autotest

    @is_autotest.setter
    def is_autotest(self, is_autotest):
        """Sets the is_autotest of this RunCreate.


        :param is_autotest: The is_autotest of this RunCreate.  # noqa: E501
        :type: bool
        """

        self._is_autotest = is_autotest

    @property
    def environment_id(self):
        """Gets the environment_id of this RunCreate.  # noqa: E501


        :return: The environment_id of this RunCreate.  # noqa: E501
        :rtype: int
        """
        return self._environment_id

    @environment_id.setter
    def environment_id(self, environment_id):
        """Sets the environment_id of this RunCreate.


        :param environment_id: The environment_id of this RunCreate.  # noqa: E501
        :type: int
        """

        self._environment_id = environment_id

    @property
    def milestone_id(self):
        """Gets the milestone_id of this RunCreate.  # noqa: E501


        :return: The milestone_id of this RunCreate.  # noqa: E501
        :rtype: int
        """
        return self._milestone_id

    @milestone_id.setter
    def milestone_id(self, milestone_id):
        """Sets the milestone_id of this RunCreate.


        :param milestone_id: The milestone_id of this RunCreate.  # noqa: E501
        :type: int
        """

        self._milestone_id = milestone_id

    @property
    def plan_id(self):
        """Gets the plan_id of this RunCreate.  # noqa: E501


        :return: The plan_id of this RunCreate.  # noqa: E501
        :rtype: int
        """
        return self._plan_id

    @plan_id.setter
    def plan_id(self, plan_id):
        """Sets the plan_id of this RunCreate.


        :param plan_id: The plan_id of this RunCreate.  # noqa: E501
        :type: int
        """

        self._plan_id = plan_id

    @property
    def tags(self):
        """Gets the tags of this RunCreate.  # noqa: E501


        :return: The tags of this RunCreate.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this RunCreate.


        :param tags: The tags of this RunCreate.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RunCreate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RunCreate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
