# coding: utf-8

"""
    Qase.io API

    Qase API Specification.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@qase.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RunStats(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total': 'int',
        'untested': 'int',
        'passed': 'int',
        'failed': 'int',
        'blocked': 'int',
        'skipped': 'int',
        'retest': 'int',
        'in_progress': 'int',
        'invalid': 'int'
    }

    attribute_map = {
        'total': 'total',
        'untested': 'untested',
        'passed': 'passed',
        'failed': 'failed',
        'blocked': 'blocked',
        'skipped': 'skipped',
        'retest': 'retest',
        'in_progress': 'in_progress',
        'invalid': 'invalid'
    }

    def __init__(self, total=None, untested=None, passed=None, failed=None, blocked=None, skipped=None, retest=None, in_progress=None, invalid=None):  # noqa: E501
        """RunStats - a model defined in Swagger"""  # noqa: E501
        self._total = None
        self._untested = None
        self._passed = None
        self._failed = None
        self._blocked = None
        self._skipped = None
        self._retest = None
        self._in_progress = None
        self._invalid = None
        self.discriminator = None
        if total is not None:
            self.total = total
        if untested is not None:
            self.untested = untested
        if passed is not None:
            self.passed = passed
        if failed is not None:
            self.failed = failed
        if blocked is not None:
            self.blocked = blocked
        if skipped is not None:
            self.skipped = skipped
        if retest is not None:
            self.retest = retest
        if in_progress is not None:
            self.in_progress = in_progress
        if invalid is not None:
            self.invalid = invalid

    @property
    def total(self):
        """Gets the total of this RunStats.  # noqa: E501


        :return: The total of this RunStats.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this RunStats.


        :param total: The total of this RunStats.  # noqa: E501
        :type: int
        """

        self._total = total

    @property
    def untested(self):
        """Gets the untested of this RunStats.  # noqa: E501


        :return: The untested of this RunStats.  # noqa: E501
        :rtype: int
        """
        return self._untested

    @untested.setter
    def untested(self, untested):
        """Sets the untested of this RunStats.


        :param untested: The untested of this RunStats.  # noqa: E501
        :type: int
        """

        self._untested = untested

    @property
    def passed(self):
        """Gets the passed of this RunStats.  # noqa: E501


        :return: The passed of this RunStats.  # noqa: E501
        :rtype: int
        """
        return self._passed

    @passed.setter
    def passed(self, passed):
        """Sets the passed of this RunStats.


        :param passed: The passed of this RunStats.  # noqa: E501
        :type: int
        """

        self._passed = passed

    @property
    def failed(self):
        """Gets the failed of this RunStats.  # noqa: E501


        :return: The failed of this RunStats.  # noqa: E501
        :rtype: int
        """
        return self._failed

    @failed.setter
    def failed(self, failed):
        """Sets the failed of this RunStats.


        :param failed: The failed of this RunStats.  # noqa: E501
        :type: int
        """

        self._failed = failed

    @property
    def blocked(self):
        """Gets the blocked of this RunStats.  # noqa: E501


        :return: The blocked of this RunStats.  # noqa: E501
        :rtype: int
        """
        return self._blocked

    @blocked.setter
    def blocked(self, blocked):
        """Sets the blocked of this RunStats.


        :param blocked: The blocked of this RunStats.  # noqa: E501
        :type: int
        """

        self._blocked = blocked

    @property
    def skipped(self):
        """Gets the skipped of this RunStats.  # noqa: E501


        :return: The skipped of this RunStats.  # noqa: E501
        :rtype: int
        """
        return self._skipped

    @skipped.setter
    def skipped(self, skipped):
        """Sets the skipped of this RunStats.


        :param skipped: The skipped of this RunStats.  # noqa: E501
        :type: int
        """

        self._skipped = skipped

    @property
    def retest(self):
        """Gets the retest of this RunStats.  # noqa: E501


        :return: The retest of this RunStats.  # noqa: E501
        :rtype: int
        """
        return self._retest

    @retest.setter
    def retest(self, retest):
        """Sets the retest of this RunStats.


        :param retest: The retest of this RunStats.  # noqa: E501
        :type: int
        """

        self._retest = retest

    @property
    def in_progress(self):
        """Gets the in_progress of this RunStats.  # noqa: E501


        :return: The in_progress of this RunStats.  # noqa: E501
        :rtype: int
        """
        return self._in_progress

    @in_progress.setter
    def in_progress(self, in_progress):
        """Sets the in_progress of this RunStats.


        :param in_progress: The in_progress of this RunStats.  # noqa: E501
        :type: int
        """

        self._in_progress = in_progress

    @property
    def invalid(self):
        """Gets the invalid of this RunStats.  # noqa: E501


        :return: The invalid of this RunStats.  # noqa: E501
        :rtype: int
        """
        return self._invalid

    @invalid.setter
    def invalid(self, invalid):
        """Sets the invalid of this RunStats.


        :param invalid: The invalid of this RunStats.  # noqa: E501
        :type: int
        """

        self._invalid = invalid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RunStats, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RunStats):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
