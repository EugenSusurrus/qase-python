# coding: utf-8

"""
    Qase.io API

    Qase API Specification.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@qase.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DefectCreate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'actual_result': 'str',
        'severity': 'int',
        'milestone_id': 'int',
        'attachments': 'list[str]',
        'custom_field': 'dict(str, str)',
        'tags': 'list[str]'
    }

    attribute_map = {
        'title': 'title',
        'actual_result': 'actual_result',
        'severity': 'severity',
        'milestone_id': 'milestone_id',
        'attachments': 'attachments',
        'custom_field': 'custom_field',
        'tags': 'tags'
    }

    def __init__(self, title=None, actual_result=None, severity=None, milestone_id=None, attachments=None, custom_field=None, tags=None):  # noqa: E501
        """DefectCreate - a model defined in Swagger"""  # noqa: E501
        self._title = None
        self._actual_result = None
        self._severity = None
        self._milestone_id = None
        self._attachments = None
        self._custom_field = None
        self._tags = None
        self.discriminator = None
        self.title = title
        self.actual_result = actual_result
        self.severity = severity
        if milestone_id is not None:
            self.milestone_id = milestone_id
        if attachments is not None:
            self.attachments = attachments
        if custom_field is not None:
            self.custom_field = custom_field
        if tags is not None:
            self.tags = tags

    @property
    def title(self):
        """Gets the title of this DefectCreate.  # noqa: E501


        :return: The title of this DefectCreate.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this DefectCreate.


        :param title: The title of this DefectCreate.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def actual_result(self):
        """Gets the actual_result of this DefectCreate.  # noqa: E501


        :return: The actual_result of this DefectCreate.  # noqa: E501
        :rtype: str
        """
        return self._actual_result

    @actual_result.setter
    def actual_result(self, actual_result):
        """Sets the actual_result of this DefectCreate.


        :param actual_result: The actual_result of this DefectCreate.  # noqa: E501
        :type: str
        """
        if actual_result is None:
            raise ValueError("Invalid value for `actual_result`, must not be `None`")  # noqa: E501

        self._actual_result = actual_result

    @property
    def severity(self):
        """Gets the severity of this DefectCreate.  # noqa: E501


        :return: The severity of this DefectCreate.  # noqa: E501
        :rtype: int
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this DefectCreate.


        :param severity: The severity of this DefectCreate.  # noqa: E501
        :type: int
        """
        if severity is None:
            raise ValueError("Invalid value for `severity`, must not be `None`")  # noqa: E501

        self._severity = severity

    @property
    def milestone_id(self):
        """Gets the milestone_id of this DefectCreate.  # noqa: E501


        :return: The milestone_id of this DefectCreate.  # noqa: E501
        :rtype: int
        """
        return self._milestone_id

    @milestone_id.setter
    def milestone_id(self, milestone_id):
        """Sets the milestone_id of this DefectCreate.


        :param milestone_id: The milestone_id of this DefectCreate.  # noqa: E501
        :type: int
        """

        self._milestone_id = milestone_id

    @property
    def attachments(self):
        """Gets the attachments of this DefectCreate.  # noqa: E501


        :return: The attachments of this DefectCreate.  # noqa: E501
        :rtype: list[str]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this DefectCreate.


        :param attachments: The attachments of this DefectCreate.  # noqa: E501
        :type: list[str]
        """

        self._attachments = attachments

    @property
    def custom_field(self):
        """Gets the custom_field of this DefectCreate.  # noqa: E501

        A map of custom fields values (id => value)  # noqa: E501

        :return: The custom_field of this DefectCreate.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._custom_field

    @custom_field.setter
    def custom_field(self, custom_field):
        """Sets the custom_field of this DefectCreate.

        A map of custom fields values (id => value)  # noqa: E501

        :param custom_field: The custom_field of this DefectCreate.  # noqa: E501
        :type: dict(str, str)
        """

        self._custom_field = custom_field

    @property
    def tags(self):
        """Gets the tags of this DefectCreate.  # noqa: E501


        :return: The tags of this DefectCreate.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this DefectCreate.


        :param tags: The tags of this DefectCreate.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DefectCreate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DefectCreate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
