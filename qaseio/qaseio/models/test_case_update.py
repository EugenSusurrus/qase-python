# coding: utf-8

"""
    Qase.io API

    Qase API Specification.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@qase.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TestCaseUpdate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'preconditions': 'str',
        'postconditions': 'str',
        'title': 'str',
        'severity': 'int',
        'priority': 'int',
        'behavior': 'int',
        'type': 'int',
        'layer': 'int',
        'is_flaky': 'int',
        'suite_id': 'int',
        'milestone_id': 'int',
        'automation': 'int',
        'status': 'int',
        'attachments': 'AttachmentHashList',
        'steps': 'list[TestCaseCreateSteps]',
        'tags': 'list[str]',
        'custom_field': 'dict(str, str)'
    }

    attribute_map = {
        'description': 'description',
        'preconditions': 'preconditions',
        'postconditions': 'postconditions',
        'title': 'title',
        'severity': 'severity',
        'priority': 'priority',
        'behavior': 'behavior',
        'type': 'type',
        'layer': 'layer',
        'is_flaky': 'is_flaky',
        'suite_id': 'suite_id',
        'milestone_id': 'milestone_id',
        'automation': 'automation',
        'status': 'status',
        'attachments': 'attachments',
        'steps': 'steps',
        'tags': 'tags',
        'custom_field': 'custom_field'
    }

    def __init__(self, description=None, preconditions=None, postconditions=None, title=None, severity=None, priority=None, behavior=None, type=None, layer=None, is_flaky=None, suite_id=None, milestone_id=None, automation=None, status=None, attachments=None, steps=None, tags=None, custom_field=None):  # noqa: E501
        """TestCaseUpdate - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._preconditions = None
        self._postconditions = None
        self._title = None
        self._severity = None
        self._priority = None
        self._behavior = None
        self._type = None
        self._layer = None
        self._is_flaky = None
        self._suite_id = None
        self._milestone_id = None
        self._automation = None
        self._status = None
        self._attachments = None
        self._steps = None
        self._tags = None
        self._custom_field = None
        self.discriminator = None
        if description is not None:
            self.description = description
        if preconditions is not None:
            self.preconditions = preconditions
        if postconditions is not None:
            self.postconditions = postconditions
        if title is not None:
            self.title = title
        if severity is not None:
            self.severity = severity
        if priority is not None:
            self.priority = priority
        if behavior is not None:
            self.behavior = behavior
        if type is not None:
            self.type = type
        if layer is not None:
            self.layer = layer
        if is_flaky is not None:
            self.is_flaky = is_flaky
        if suite_id is not None:
            self.suite_id = suite_id
        if milestone_id is not None:
            self.milestone_id = milestone_id
        if automation is not None:
            self.automation = automation
        if status is not None:
            self.status = status
        if attachments is not None:
            self.attachments = attachments
        if steps is not None:
            self.steps = steps
        if tags is not None:
            self.tags = tags
        if custom_field is not None:
            self.custom_field = custom_field

    @property
    def description(self):
        """Gets the description of this TestCaseUpdate.  # noqa: E501


        :return: The description of this TestCaseUpdate.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TestCaseUpdate.


        :param description: The description of this TestCaseUpdate.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def preconditions(self):
        """Gets the preconditions of this TestCaseUpdate.  # noqa: E501


        :return: The preconditions of this TestCaseUpdate.  # noqa: E501
        :rtype: str
        """
        return self._preconditions

    @preconditions.setter
    def preconditions(self, preconditions):
        """Sets the preconditions of this TestCaseUpdate.


        :param preconditions: The preconditions of this TestCaseUpdate.  # noqa: E501
        :type: str
        """

        self._preconditions = preconditions

    @property
    def postconditions(self):
        """Gets the postconditions of this TestCaseUpdate.  # noqa: E501


        :return: The postconditions of this TestCaseUpdate.  # noqa: E501
        :rtype: str
        """
        return self._postconditions

    @postconditions.setter
    def postconditions(self, postconditions):
        """Sets the postconditions of this TestCaseUpdate.


        :param postconditions: The postconditions of this TestCaseUpdate.  # noqa: E501
        :type: str
        """

        self._postconditions = postconditions

    @property
    def title(self):
        """Gets the title of this TestCaseUpdate.  # noqa: E501


        :return: The title of this TestCaseUpdate.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this TestCaseUpdate.


        :param title: The title of this TestCaseUpdate.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def severity(self):
        """Gets the severity of this TestCaseUpdate.  # noqa: E501


        :return: The severity of this TestCaseUpdate.  # noqa: E501
        :rtype: int
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this TestCaseUpdate.


        :param severity: The severity of this TestCaseUpdate.  # noqa: E501
        :type: int
        """

        self._severity = severity

    @property
    def priority(self):
        """Gets the priority of this TestCaseUpdate.  # noqa: E501


        :return: The priority of this TestCaseUpdate.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this TestCaseUpdate.


        :param priority: The priority of this TestCaseUpdate.  # noqa: E501
        :type: int
        """

        self._priority = priority

    @property
    def behavior(self):
        """Gets the behavior of this TestCaseUpdate.  # noqa: E501


        :return: The behavior of this TestCaseUpdate.  # noqa: E501
        :rtype: int
        """
        return self._behavior

    @behavior.setter
    def behavior(self, behavior):
        """Sets the behavior of this TestCaseUpdate.


        :param behavior: The behavior of this TestCaseUpdate.  # noqa: E501
        :type: int
        """

        self._behavior = behavior

    @property
    def type(self):
        """Gets the type of this TestCaseUpdate.  # noqa: E501


        :return: The type of this TestCaseUpdate.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TestCaseUpdate.


        :param type: The type of this TestCaseUpdate.  # noqa: E501
        :type: int
        """

        self._type = type

    @property
    def layer(self):
        """Gets the layer of this TestCaseUpdate.  # noqa: E501


        :return: The layer of this TestCaseUpdate.  # noqa: E501
        :rtype: int
        """
        return self._layer

    @layer.setter
    def layer(self, layer):
        """Sets the layer of this TestCaseUpdate.


        :param layer: The layer of this TestCaseUpdate.  # noqa: E501
        :type: int
        """

        self._layer = layer

    @property
    def is_flaky(self):
        """Gets the is_flaky of this TestCaseUpdate.  # noqa: E501


        :return: The is_flaky of this TestCaseUpdate.  # noqa: E501
        :rtype: int
        """
        return self._is_flaky

    @is_flaky.setter
    def is_flaky(self, is_flaky):
        """Sets the is_flaky of this TestCaseUpdate.


        :param is_flaky: The is_flaky of this TestCaseUpdate.  # noqa: E501
        :type: int
        """

        self._is_flaky = is_flaky

    @property
    def suite_id(self):
        """Gets the suite_id of this TestCaseUpdate.  # noqa: E501


        :return: The suite_id of this TestCaseUpdate.  # noqa: E501
        :rtype: int
        """
        return self._suite_id

    @suite_id.setter
    def suite_id(self, suite_id):
        """Sets the suite_id of this TestCaseUpdate.


        :param suite_id: The suite_id of this TestCaseUpdate.  # noqa: E501
        :type: int
        """

        self._suite_id = suite_id

    @property
    def milestone_id(self):
        """Gets the milestone_id of this TestCaseUpdate.  # noqa: E501


        :return: The milestone_id of this TestCaseUpdate.  # noqa: E501
        :rtype: int
        """
        return self._milestone_id

    @milestone_id.setter
    def milestone_id(self, milestone_id):
        """Sets the milestone_id of this TestCaseUpdate.


        :param milestone_id: The milestone_id of this TestCaseUpdate.  # noqa: E501
        :type: int
        """

        self._milestone_id = milestone_id

    @property
    def automation(self):
        """Gets the automation of this TestCaseUpdate.  # noqa: E501


        :return: The automation of this TestCaseUpdate.  # noqa: E501
        :rtype: int
        """
        return self._automation

    @automation.setter
    def automation(self, automation):
        """Sets the automation of this TestCaseUpdate.


        :param automation: The automation of this TestCaseUpdate.  # noqa: E501
        :type: int
        """

        self._automation = automation

    @property
    def status(self):
        """Gets the status of this TestCaseUpdate.  # noqa: E501


        :return: The status of this TestCaseUpdate.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TestCaseUpdate.


        :param status: The status of this TestCaseUpdate.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def attachments(self):
        """Gets the attachments of this TestCaseUpdate.  # noqa: E501


        :return: The attachments of this TestCaseUpdate.  # noqa: E501
        :rtype: AttachmentHashList
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this TestCaseUpdate.


        :param attachments: The attachments of this TestCaseUpdate.  # noqa: E501
        :type: AttachmentHashList
        """

        self._attachments = attachments

    @property
    def steps(self):
        """Gets the steps of this TestCaseUpdate.  # noqa: E501


        :return: The steps of this TestCaseUpdate.  # noqa: E501
        :rtype: list[TestCaseCreateSteps]
        """
        return self._steps

    @steps.setter
    def steps(self, steps):
        """Sets the steps of this TestCaseUpdate.


        :param steps: The steps of this TestCaseUpdate.  # noqa: E501
        :type: list[TestCaseCreateSteps]
        """

        self._steps = steps

    @property
    def tags(self):
        """Gets the tags of this TestCaseUpdate.  # noqa: E501


        :return: The tags of this TestCaseUpdate.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this TestCaseUpdate.


        :param tags: The tags of this TestCaseUpdate.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def custom_field(self):
        """Gets the custom_field of this TestCaseUpdate.  # noqa: E501

        A map of custom fields values (id => value)  # noqa: E501

        :return: The custom_field of this TestCaseUpdate.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._custom_field

    @custom_field.setter
    def custom_field(self, custom_field):
        """Sets the custom_field of this TestCaseUpdate.

        A map of custom fields values (id => value)  # noqa: E501

        :param custom_field: The custom_field of this TestCaseUpdate.  # noqa: E501
        :type: dict(str, str)
        """

        self._custom_field = custom_field

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TestCaseUpdate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TestCaseUpdate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
