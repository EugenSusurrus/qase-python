# coding: utf-8

"""
    Qase.io API

    Qase API Specification.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@qase.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProjectCounts(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cases': 'int',
        'suites': 'int',
        'milestones': 'int',
        'runs': 'ProjectCountsRuns',
        'defects': 'ProjectCountsDefects'
    }

    attribute_map = {
        'cases': 'cases',
        'suites': 'suites',
        'milestones': 'milestones',
        'runs': 'runs',
        'defects': 'defects'
    }

    def __init__(self, cases=None, suites=None, milestones=None, runs=None, defects=None):  # noqa: E501
        """ProjectCounts - a model defined in Swagger"""  # noqa: E501
        self._cases = None
        self._suites = None
        self._milestones = None
        self._runs = None
        self._defects = None
        self.discriminator = None
        if cases is not None:
            self.cases = cases
        if suites is not None:
            self.suites = suites
        if milestones is not None:
            self.milestones = milestones
        if runs is not None:
            self.runs = runs
        if defects is not None:
            self.defects = defects

    @property
    def cases(self):
        """Gets the cases of this ProjectCounts.  # noqa: E501


        :return: The cases of this ProjectCounts.  # noqa: E501
        :rtype: int
        """
        return self._cases

    @cases.setter
    def cases(self, cases):
        """Sets the cases of this ProjectCounts.


        :param cases: The cases of this ProjectCounts.  # noqa: E501
        :type: int
        """

        self._cases = cases

    @property
    def suites(self):
        """Gets the suites of this ProjectCounts.  # noqa: E501


        :return: The suites of this ProjectCounts.  # noqa: E501
        :rtype: int
        """
        return self._suites

    @suites.setter
    def suites(self, suites):
        """Sets the suites of this ProjectCounts.


        :param suites: The suites of this ProjectCounts.  # noqa: E501
        :type: int
        """

        self._suites = suites

    @property
    def milestones(self):
        """Gets the milestones of this ProjectCounts.  # noqa: E501


        :return: The milestones of this ProjectCounts.  # noqa: E501
        :rtype: int
        """
        return self._milestones

    @milestones.setter
    def milestones(self, milestones):
        """Sets the milestones of this ProjectCounts.


        :param milestones: The milestones of this ProjectCounts.  # noqa: E501
        :type: int
        """

        self._milestones = milestones

    @property
    def runs(self):
        """Gets the runs of this ProjectCounts.  # noqa: E501


        :return: The runs of this ProjectCounts.  # noqa: E501
        :rtype: ProjectCountsRuns
        """
        return self._runs

    @runs.setter
    def runs(self, runs):
        """Sets the runs of this ProjectCounts.


        :param runs: The runs of this ProjectCounts.  # noqa: E501
        :type: ProjectCountsRuns
        """

        self._runs = runs

    @property
    def defects(self):
        """Gets the defects of this ProjectCounts.  # noqa: E501


        :return: The defects of this ProjectCounts.  # noqa: E501
        :rtype: ProjectCountsDefects
        """
        return self._defects

    @defects.setter
    def defects(self, defects):
        """Sets the defects of this ProjectCounts.


        :param defects: The defects of this ProjectCounts.  # noqa: E501
        :type: ProjectCountsDefects
        """

        self._defects = defects

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProjectCounts, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectCounts):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
