# coding: utf-8

"""
    Qase.io API

    Qase API Specification.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@qase.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Filters5(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'search': 'str',
        'status': 'str',
        'milestone': 'int',
        'environment': 'int',
        'from_start_time': 'int',
        'to_start_time': 'int'
    }

    attribute_map = {
        'search': 'search',
        'status': 'status',
        'milestone': 'milestone',
        'environment': 'environment',
        'from_start_time': 'from_start_time',
        'to_start_time': 'to_start_time'
    }

    def __init__(self, search=None, status=None, milestone=None, environment=None, from_start_time=None, to_start_time=None):  # noqa: E501
        """Filters5 - a model defined in Swagger"""  # noqa: E501
        self._search = None
        self._status = None
        self._milestone = None
        self._environment = None
        self._from_start_time = None
        self._to_start_time = None
        self.discriminator = None
        if search is not None:
            self.search = search
        if status is not None:
            self.status = status
        if milestone is not None:
            self.milestone = milestone
        if environment is not None:
            self.environment = environment
        if from_start_time is not None:
            self.from_start_time = from_start_time
        if to_start_time is not None:
            self.to_start_time = to_start_time

    @property
    def search(self):
        """Gets the search of this Filters5.  # noqa: E501


        :return: The search of this Filters5.  # noqa: E501
        :rtype: str
        """
        return self._search

    @search.setter
    def search(self, search):
        """Sets the search of this Filters5.


        :param search: The search of this Filters5.  # noqa: E501
        :type: str
        """

        self._search = search

    @property
    def status(self):
        """Gets the status of this Filters5.  # noqa: E501

        A list of status values separated by comma. Possible values: active, complete, abort.   # noqa: E501

        :return: The status of this Filters5.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Filters5.

        A list of status values separated by comma. Possible values: active, complete, abort.   # noqa: E501

        :param status: The status of this Filters5.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def milestone(self):
        """Gets the milestone of this Filters5.  # noqa: E501


        :return: The milestone of this Filters5.  # noqa: E501
        :rtype: int
        """
        return self._milestone

    @milestone.setter
    def milestone(self, milestone):
        """Sets the milestone of this Filters5.


        :param milestone: The milestone of this Filters5.  # noqa: E501
        :type: int
        """

        self._milestone = milestone

    @property
    def environment(self):
        """Gets the environment of this Filters5.  # noqa: E501


        :return: The environment of this Filters5.  # noqa: E501
        :rtype: int
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this Filters5.


        :param environment: The environment of this Filters5.  # noqa: E501
        :type: int
        """

        self._environment = environment

    @property
    def from_start_time(self):
        """Gets the from_start_time of this Filters5.  # noqa: E501


        :return: The from_start_time of this Filters5.  # noqa: E501
        :rtype: int
        """
        return self._from_start_time

    @from_start_time.setter
    def from_start_time(self, from_start_time):
        """Sets the from_start_time of this Filters5.


        :param from_start_time: The from_start_time of this Filters5.  # noqa: E501
        :type: int
        """

        self._from_start_time = from_start_time

    @property
    def to_start_time(self):
        """Gets the to_start_time of this Filters5.  # noqa: E501


        :return: The to_start_time of this Filters5.  # noqa: E501
        :rtype: int
        """
        return self._to_start_time

    @to_start_time.setter
    def to_start_time(self, to_start_time):
        """Sets the to_start_time of this Filters5.


        :param to_start_time: The to_start_time of this Filters5.  # noqa: E501
        :type: int
        """

        self._to_start_time = to_start_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Filters5, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Filters5):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
