# coding: utf-8

"""
    Qase.io API

    Qase API Specification.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@qase.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TestCase(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'position': 'int',
        'title': 'str',
        'description': 'str',
        'preconditions': 'str',
        'postconditions': 'str',
        'severity': 'int',
        'priority': 'int',
        'type': 'int',
        'layer': 'int',
        'is_flaky': 'int',
        'behavior': 'int',
        'automation': 'int',
        'status': 'int',
        'milestone_id': 'int',
        'suite_id': 'int',
        'custom_fields': 'list[CustomFieldValue]',
        'attachments': 'list[Attachment]',
        'steps': 'list[TestStep]',
        'params': 'AnyOfTestCaseParams',
        'created': 'datetime',
        'updated': 'datetime',
        'tags': 'list[TagValue]',
        'deleted': 'datetime',
        'member_id': 'int',
        'project_id': 'int'
    }

    attribute_map = {
        'id': 'id',
        'position': 'position',
        'title': 'title',
        'description': 'description',
        'preconditions': 'preconditions',
        'postconditions': 'postconditions',
        'severity': 'severity',
        'priority': 'priority',
        'type': 'type',
        'layer': 'layer',
        'is_flaky': 'is_flaky',
        'behavior': 'behavior',
        'automation': 'automation',
        'status': 'status',
        'milestone_id': 'milestone_id',
        'suite_id': 'suite_id',
        'custom_fields': 'custom_fields',
        'attachments': 'attachments',
        'steps': 'steps',
        'params': 'params',
        'created': 'created',
        'updated': 'updated',
        'tags': 'tags',
        'deleted': 'deleted',
        'member_id': 'member_id',
        'project_id': 'project_id'
    }

    def __init__(self, id=None, position=None, title=None, description=None, preconditions=None, postconditions=None, severity=None, priority=None, type=None, layer=None, is_flaky=None, behavior=None, automation=None, status=None, milestone_id=None, suite_id=None, custom_fields=None, attachments=None, steps=None, params=None, created=None, updated=None, tags=None, deleted=None, member_id=None, project_id=None):  # noqa: E501
        """TestCase - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._position = None
        self._title = None
        self._description = None
        self._preconditions = None
        self._postconditions = None
        self._severity = None
        self._priority = None
        self._type = None
        self._layer = None
        self._is_flaky = None
        self._behavior = None
        self._automation = None
        self._status = None
        self._milestone_id = None
        self._suite_id = None
        self._custom_fields = None
        self._attachments = None
        self._steps = None
        self._params = None
        self._created = None
        self._updated = None
        self._tags = None
        self._deleted = None
        self._member_id = None
        self._project_id = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if position is not None:
            self.position = position
        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        if preconditions is not None:
            self.preconditions = preconditions
        if postconditions is not None:
            self.postconditions = postconditions
        if severity is not None:
            self.severity = severity
        if priority is not None:
            self.priority = priority
        if type is not None:
            self.type = type
        if layer is not None:
            self.layer = layer
        if is_flaky is not None:
            self.is_flaky = is_flaky
        if behavior is not None:
            self.behavior = behavior
        if automation is not None:
            self.automation = automation
        if status is not None:
            self.status = status
        if milestone_id is not None:
            self.milestone_id = milestone_id
        if suite_id is not None:
            self.suite_id = suite_id
        if custom_fields is not None:
            self.custom_fields = custom_fields
        if attachments is not None:
            self.attachments = attachments
        if steps is not None:
            self.steps = steps
        if params is not None:
            self.params = params
        if created is not None:
            self.created = created
        if updated is not None:
            self.updated = updated
        if tags is not None:
            self.tags = tags
        if deleted is not None:
            self.deleted = deleted
        if member_id is not None:
            self.member_id = member_id
        if project_id is not None:
            self.project_id = project_id

    @property
    def id(self):
        """Gets the id of this TestCase.  # noqa: E501


        :return: The id of this TestCase.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TestCase.


        :param id: The id of this TestCase.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def position(self):
        """Gets the position of this TestCase.  # noqa: E501


        :return: The position of this TestCase.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this TestCase.


        :param position: The position of this TestCase.  # noqa: E501
        :type: int
        """

        self._position = position

    @property
    def title(self):
        """Gets the title of this TestCase.  # noqa: E501


        :return: The title of this TestCase.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this TestCase.


        :param title: The title of this TestCase.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this TestCase.  # noqa: E501


        :return: The description of this TestCase.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TestCase.


        :param description: The description of this TestCase.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def preconditions(self):
        """Gets the preconditions of this TestCase.  # noqa: E501


        :return: The preconditions of this TestCase.  # noqa: E501
        :rtype: str
        """
        return self._preconditions

    @preconditions.setter
    def preconditions(self, preconditions):
        """Sets the preconditions of this TestCase.


        :param preconditions: The preconditions of this TestCase.  # noqa: E501
        :type: str
        """

        self._preconditions = preconditions

    @property
    def postconditions(self):
        """Gets the postconditions of this TestCase.  # noqa: E501


        :return: The postconditions of this TestCase.  # noqa: E501
        :rtype: str
        """
        return self._postconditions

    @postconditions.setter
    def postconditions(self, postconditions):
        """Sets the postconditions of this TestCase.


        :param postconditions: The postconditions of this TestCase.  # noqa: E501
        :type: str
        """

        self._postconditions = postconditions

    @property
    def severity(self):
        """Gets the severity of this TestCase.  # noqa: E501


        :return: The severity of this TestCase.  # noqa: E501
        :rtype: int
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this TestCase.


        :param severity: The severity of this TestCase.  # noqa: E501
        :type: int
        """

        self._severity = severity

    @property
    def priority(self):
        """Gets the priority of this TestCase.  # noqa: E501


        :return: The priority of this TestCase.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this TestCase.


        :param priority: The priority of this TestCase.  # noqa: E501
        :type: int
        """

        self._priority = priority

    @property
    def type(self):
        """Gets the type of this TestCase.  # noqa: E501


        :return: The type of this TestCase.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TestCase.


        :param type: The type of this TestCase.  # noqa: E501
        :type: int
        """

        self._type = type

    @property
    def layer(self):
        """Gets the layer of this TestCase.  # noqa: E501


        :return: The layer of this TestCase.  # noqa: E501
        :rtype: int
        """
        return self._layer

    @layer.setter
    def layer(self, layer):
        """Sets the layer of this TestCase.


        :param layer: The layer of this TestCase.  # noqa: E501
        :type: int
        """

        self._layer = layer

    @property
    def is_flaky(self):
        """Gets the is_flaky of this TestCase.  # noqa: E501


        :return: The is_flaky of this TestCase.  # noqa: E501
        :rtype: int
        """
        return self._is_flaky

    @is_flaky.setter
    def is_flaky(self, is_flaky):
        """Sets the is_flaky of this TestCase.


        :param is_flaky: The is_flaky of this TestCase.  # noqa: E501
        :type: int
        """

        self._is_flaky = is_flaky

    @property
    def behavior(self):
        """Gets the behavior of this TestCase.  # noqa: E501


        :return: The behavior of this TestCase.  # noqa: E501
        :rtype: int
        """
        return self._behavior

    @behavior.setter
    def behavior(self, behavior):
        """Sets the behavior of this TestCase.


        :param behavior: The behavior of this TestCase.  # noqa: E501
        :type: int
        """

        self._behavior = behavior

    @property
    def automation(self):
        """Gets the automation of this TestCase.  # noqa: E501


        :return: The automation of this TestCase.  # noqa: E501
        :rtype: int
        """
        return self._automation

    @automation.setter
    def automation(self, automation):
        """Sets the automation of this TestCase.


        :param automation: The automation of this TestCase.  # noqa: E501
        :type: int
        """

        self._automation = automation

    @property
    def status(self):
        """Gets the status of this TestCase.  # noqa: E501


        :return: The status of this TestCase.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TestCase.


        :param status: The status of this TestCase.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def milestone_id(self):
        """Gets the milestone_id of this TestCase.  # noqa: E501


        :return: The milestone_id of this TestCase.  # noqa: E501
        :rtype: int
        """
        return self._milestone_id

    @milestone_id.setter
    def milestone_id(self, milestone_id):
        """Sets the milestone_id of this TestCase.


        :param milestone_id: The milestone_id of this TestCase.  # noqa: E501
        :type: int
        """

        self._milestone_id = milestone_id

    @property
    def suite_id(self):
        """Gets the suite_id of this TestCase.  # noqa: E501


        :return: The suite_id of this TestCase.  # noqa: E501
        :rtype: int
        """
        return self._suite_id

    @suite_id.setter
    def suite_id(self, suite_id):
        """Sets the suite_id of this TestCase.


        :param suite_id: The suite_id of this TestCase.  # noqa: E501
        :type: int
        """

        self._suite_id = suite_id

    @property
    def custom_fields(self):
        """Gets the custom_fields of this TestCase.  # noqa: E501


        :return: The custom_fields of this TestCase.  # noqa: E501
        :rtype: list[CustomFieldValue]
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this TestCase.


        :param custom_fields: The custom_fields of this TestCase.  # noqa: E501
        :type: list[CustomFieldValue]
        """

        self._custom_fields = custom_fields

    @property
    def attachments(self):
        """Gets the attachments of this TestCase.  # noqa: E501


        :return: The attachments of this TestCase.  # noqa: E501
        :rtype: list[Attachment]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this TestCase.


        :param attachments: The attachments of this TestCase.  # noqa: E501
        :type: list[Attachment]
        """

        self._attachments = attachments

    @property
    def steps(self):
        """Gets the steps of this TestCase.  # noqa: E501


        :return: The steps of this TestCase.  # noqa: E501
        :rtype: list[TestStep]
        """
        return self._steps

    @steps.setter
    def steps(self, steps):
        """Sets the steps of this TestCase.


        :param steps: The steps of this TestCase.  # noqa: E501
        :type: list[TestStep]
        """

        self._steps = steps

    @property
    def params(self):
        """Gets the params of this TestCase.  # noqa: E501


        :return: The params of this TestCase.  # noqa: E501
        :rtype: AnyOfTestCaseParams
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this TestCase.


        :param params: The params of this TestCase.  # noqa: E501
        :type: AnyOfTestCaseParams
        """

        self._params = params

    @property
    def created(self):
        """Gets the created of this TestCase.  # noqa: E501


        :return: The created of this TestCase.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this TestCase.


        :param created: The created of this TestCase.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def updated(self):
        """Gets the updated of this TestCase.  # noqa: E501


        :return: The updated of this TestCase.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this TestCase.


        :param updated: The updated of this TestCase.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def tags(self):
        """Gets the tags of this TestCase.  # noqa: E501


        :return: The tags of this TestCase.  # noqa: E501
        :rtype: list[TagValue]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this TestCase.


        :param tags: The tags of this TestCase.  # noqa: E501
        :type: list[TagValue]
        """

        self._tags = tags

    @property
    def deleted(self):
        """Gets the deleted of this TestCase.  # noqa: E501


        :return: The deleted of this TestCase.  # noqa: E501
        :rtype: datetime
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this TestCase.


        :param deleted: The deleted of this TestCase.  # noqa: E501
        :type: datetime
        """

        self._deleted = deleted

    @property
    def member_id(self):
        """Gets the member_id of this TestCase.  # noqa: E501


        :return: The member_id of this TestCase.  # noqa: E501
        :rtype: int
        """
        return self._member_id

    @member_id.setter
    def member_id(self, member_id):
        """Sets the member_id of this TestCase.


        :param member_id: The member_id of this TestCase.  # noqa: E501
        :type: int
        """

        self._member_id = member_id

    @property
    def project_id(self):
        """Gets the project_id of this TestCase.  # noqa: E501


        :return: The project_id of this TestCase.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this TestCase.


        :param project_id: The project_id of this TestCase.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TestCase, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TestCase):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
