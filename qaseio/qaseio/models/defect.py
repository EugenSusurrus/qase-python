# coding: utf-8

"""
    Qase.io API

    Qase API Specification.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@qase.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Defect(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'title': 'str',
        'actual_result': 'str',
        'severity': 'str',
        'status': 'str',
        'milestone_id': 'int',
        'custom_fields': 'list[CustomFieldValue]',
        'attachments': 'list[Attachment]',
        'created': 'datetime',
        'updated': 'datetime',
        'deleted': 'datetime',
        'resolved': 'datetime',
        'project_id': 'int',
        'member_id': 'int',
        'external_data': 'str',
        'tags': 'list[TagValue]'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'actual_result': 'actual_result',
        'severity': 'severity',
        'status': 'status',
        'milestone_id': 'milestone_id',
        'custom_fields': 'custom_fields',
        'attachments': 'attachments',
        'created': 'created',
        'updated': 'updated',
        'deleted': 'deleted',
        'resolved': 'resolved',
        'project_id': 'project_id',
        'member_id': 'member_id',
        'external_data': 'external_data',
        'tags': 'tags'
    }

    def __init__(self, id=None, title=None, actual_result=None, severity=None, status=None, milestone_id=None, custom_fields=None, attachments=None, created=None, updated=None, deleted=None, resolved=None, project_id=None, member_id=None, external_data=None, tags=None):  # noqa: E501
        """Defect - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._title = None
        self._actual_result = None
        self._severity = None
        self._status = None
        self._milestone_id = None
        self._custom_fields = None
        self._attachments = None
        self._created = None
        self._updated = None
        self._deleted = None
        self._resolved = None
        self._project_id = None
        self._member_id = None
        self._external_data = None
        self._tags = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if title is not None:
            self.title = title
        if actual_result is not None:
            self.actual_result = actual_result
        if severity is not None:
            self.severity = severity
        if status is not None:
            self.status = status
        if milestone_id is not None:
            self.milestone_id = milestone_id
        if custom_fields is not None:
            self.custom_fields = custom_fields
        if attachments is not None:
            self.attachments = attachments
        if created is not None:
            self.created = created
        if updated is not None:
            self.updated = updated
        if deleted is not None:
            self.deleted = deleted
        if resolved is not None:
            self.resolved = resolved
        if project_id is not None:
            self.project_id = project_id
        if member_id is not None:
            self.member_id = member_id
        if external_data is not None:
            self.external_data = external_data
        if tags is not None:
            self.tags = tags

    @property
    def id(self):
        """Gets the id of this Defect.  # noqa: E501


        :return: The id of this Defect.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Defect.


        :param id: The id of this Defect.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this Defect.  # noqa: E501


        :return: The title of this Defect.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Defect.


        :param title: The title of this Defect.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def actual_result(self):
        """Gets the actual_result of this Defect.  # noqa: E501


        :return: The actual_result of this Defect.  # noqa: E501
        :rtype: str
        """
        return self._actual_result

    @actual_result.setter
    def actual_result(self, actual_result):
        """Sets the actual_result of this Defect.


        :param actual_result: The actual_result of this Defect.  # noqa: E501
        :type: str
        """

        self._actual_result = actual_result

    @property
    def severity(self):
        """Gets the severity of this Defect.  # noqa: E501


        :return: The severity of this Defect.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this Defect.


        :param severity: The severity of this Defect.  # noqa: E501
        :type: str
        """

        self._severity = severity

    @property
    def status(self):
        """Gets the status of this Defect.  # noqa: E501


        :return: The status of this Defect.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Defect.


        :param status: The status of this Defect.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def milestone_id(self):
        """Gets the milestone_id of this Defect.  # noqa: E501


        :return: The milestone_id of this Defect.  # noqa: E501
        :rtype: int
        """
        return self._milestone_id

    @milestone_id.setter
    def milestone_id(self, milestone_id):
        """Sets the milestone_id of this Defect.


        :param milestone_id: The milestone_id of this Defect.  # noqa: E501
        :type: int
        """

        self._milestone_id = milestone_id

    @property
    def custom_fields(self):
        """Gets the custom_fields of this Defect.  # noqa: E501


        :return: The custom_fields of this Defect.  # noqa: E501
        :rtype: list[CustomFieldValue]
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this Defect.


        :param custom_fields: The custom_fields of this Defect.  # noqa: E501
        :type: list[CustomFieldValue]
        """

        self._custom_fields = custom_fields

    @property
    def attachments(self):
        """Gets the attachments of this Defect.  # noqa: E501


        :return: The attachments of this Defect.  # noqa: E501
        :rtype: list[Attachment]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this Defect.


        :param attachments: The attachments of this Defect.  # noqa: E501
        :type: list[Attachment]
        """

        self._attachments = attachments

    @property
    def created(self):
        """Gets the created of this Defect.  # noqa: E501


        :return: The created of this Defect.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Defect.


        :param created: The created of this Defect.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def updated(self):
        """Gets the updated of this Defect.  # noqa: E501


        :return: The updated of this Defect.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Defect.


        :param updated: The updated of this Defect.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def deleted(self):
        """Gets the deleted of this Defect.  # noqa: E501


        :return: The deleted of this Defect.  # noqa: E501
        :rtype: datetime
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Defect.


        :param deleted: The deleted of this Defect.  # noqa: E501
        :type: datetime
        """

        self._deleted = deleted

    @property
    def resolved(self):
        """Gets the resolved of this Defect.  # noqa: E501


        :return: The resolved of this Defect.  # noqa: E501
        :rtype: datetime
        """
        return self._resolved

    @resolved.setter
    def resolved(self, resolved):
        """Sets the resolved of this Defect.


        :param resolved: The resolved of this Defect.  # noqa: E501
        :type: datetime
        """

        self._resolved = resolved

    @property
    def project_id(self):
        """Gets the project_id of this Defect.  # noqa: E501


        :return: The project_id of this Defect.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this Defect.


        :param project_id: The project_id of this Defect.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def member_id(self):
        """Gets the member_id of this Defect.  # noqa: E501


        :return: The member_id of this Defect.  # noqa: E501
        :rtype: int
        """
        return self._member_id

    @member_id.setter
    def member_id(self, member_id):
        """Sets the member_id of this Defect.


        :param member_id: The member_id of this Defect.  # noqa: E501
        :type: int
        """

        self._member_id = member_id

    @property
    def external_data(self):
        """Gets the external_data of this Defect.  # noqa: E501


        :return: The external_data of this Defect.  # noqa: E501
        :rtype: str
        """
        return self._external_data

    @external_data.setter
    def external_data(self, external_data):
        """Sets the external_data of this Defect.


        :param external_data: The external_data of this Defect.  # noqa: E501
        :type: str
        """

        self._external_data = external_data

    @property
    def tags(self):
        """Gets the tags of this Defect.  # noqa: E501


        :return: The tags of this Defect.  # noqa: E501
        :rtype: list[TagValue]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Defect.


        :param tags: The tags of this Defect.  # noqa: E501
        :type: list[TagValue]
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Defect, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Defect):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
