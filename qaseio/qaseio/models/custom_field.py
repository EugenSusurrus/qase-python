# coding: utf-8

"""
    Qase.io API

    Qase API Specification.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@qase.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CustomField(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'title': 'str',
        'entity': 'str',
        'type': 'str',
        'placeholder': 'str',
        'default_value': 'str',
        'value': 'str',
        'is_required': 'bool',
        'is_visible': 'bool',
        'is_filterable': 'bool',
        'created': 'datetime',
        'updated': 'datetime',
        'projects_codes': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'entity': 'entity',
        'type': 'type',
        'placeholder': 'placeholder',
        'default_value': 'default_value',
        'value': 'value',
        'is_required': 'is_required',
        'is_visible': 'is_visible',
        'is_filterable': 'is_filterable',
        'created': 'created',
        'updated': 'updated',
        'projects_codes': 'projects_codes'
    }

    def __init__(self, id=None, title=None, entity=None, type=None, placeholder=None, default_value=None, value=None, is_required=None, is_visible=None, is_filterable=None, created=None, updated=None, projects_codes=None):  # noqa: E501
        """CustomField - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._title = None
        self._entity = None
        self._type = None
        self._placeholder = None
        self._default_value = None
        self._value = None
        self._is_required = None
        self._is_visible = None
        self._is_filterable = None
        self._created = None
        self._updated = None
        self._projects_codes = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if title is not None:
            self.title = title
        if entity is not None:
            self.entity = entity
        if type is not None:
            self.type = type
        if placeholder is not None:
            self.placeholder = placeholder
        if default_value is not None:
            self.default_value = default_value
        if value is not None:
            self.value = value
        if is_required is not None:
            self.is_required = is_required
        if is_visible is not None:
            self.is_visible = is_visible
        if is_filterable is not None:
            self.is_filterable = is_filterable
        if created is not None:
            self.created = created
        if updated is not None:
            self.updated = updated
        if projects_codes is not None:
            self.projects_codes = projects_codes

    @property
    def id(self):
        """Gets the id of this CustomField.  # noqa: E501


        :return: The id of this CustomField.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CustomField.


        :param id: The id of this CustomField.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this CustomField.  # noqa: E501


        :return: The title of this CustomField.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CustomField.


        :param title: The title of this CustomField.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def entity(self):
        """Gets the entity of this CustomField.  # noqa: E501


        :return: The entity of this CustomField.  # noqa: E501
        :rtype: str
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this CustomField.


        :param entity: The entity of this CustomField.  # noqa: E501
        :type: str
        """

        self._entity = entity

    @property
    def type(self):
        """Gets the type of this CustomField.  # noqa: E501


        :return: The type of this CustomField.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CustomField.


        :param type: The type of this CustomField.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def placeholder(self):
        """Gets the placeholder of this CustomField.  # noqa: E501


        :return: The placeholder of this CustomField.  # noqa: E501
        :rtype: str
        """
        return self._placeholder

    @placeholder.setter
    def placeholder(self, placeholder):
        """Sets the placeholder of this CustomField.


        :param placeholder: The placeholder of this CustomField.  # noqa: E501
        :type: str
        """

        self._placeholder = placeholder

    @property
    def default_value(self):
        """Gets the default_value of this CustomField.  # noqa: E501


        :return: The default_value of this CustomField.  # noqa: E501
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this CustomField.


        :param default_value: The default_value of this CustomField.  # noqa: E501
        :type: str
        """

        self._default_value = default_value

    @property
    def value(self):
        """Gets the value of this CustomField.  # noqa: E501


        :return: The value of this CustomField.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this CustomField.


        :param value: The value of this CustomField.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def is_required(self):
        """Gets the is_required of this CustomField.  # noqa: E501


        :return: The is_required of this CustomField.  # noqa: E501
        :rtype: bool
        """
        return self._is_required

    @is_required.setter
    def is_required(self, is_required):
        """Sets the is_required of this CustomField.


        :param is_required: The is_required of this CustomField.  # noqa: E501
        :type: bool
        """

        self._is_required = is_required

    @property
    def is_visible(self):
        """Gets the is_visible of this CustomField.  # noqa: E501


        :return: The is_visible of this CustomField.  # noqa: E501
        :rtype: bool
        """
        return self._is_visible

    @is_visible.setter
    def is_visible(self, is_visible):
        """Sets the is_visible of this CustomField.


        :param is_visible: The is_visible of this CustomField.  # noqa: E501
        :type: bool
        """

        self._is_visible = is_visible

    @property
    def is_filterable(self):
        """Gets the is_filterable of this CustomField.  # noqa: E501


        :return: The is_filterable of this CustomField.  # noqa: E501
        :rtype: bool
        """
        return self._is_filterable

    @is_filterable.setter
    def is_filterable(self, is_filterable):
        """Sets the is_filterable of this CustomField.


        :param is_filterable: The is_filterable of this CustomField.  # noqa: E501
        :type: bool
        """

        self._is_filterable = is_filterable

    @property
    def created(self):
        """Gets the created of this CustomField.  # noqa: E501


        :return: The created of this CustomField.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this CustomField.


        :param created: The created of this CustomField.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def updated(self):
        """Gets the updated of this CustomField.  # noqa: E501


        :return: The updated of this CustomField.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this CustomField.


        :param updated: The updated of this CustomField.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def projects_codes(self):
        """Gets the projects_codes of this CustomField.  # noqa: E501


        :return: The projects_codes of this CustomField.  # noqa: E501
        :rtype: list[str]
        """
        return self._projects_codes

    @projects_codes.setter
    def projects_codes(self, projects_codes):
        """Sets the projects_codes of this CustomField.


        :param projects_codes: The projects_codes of this CustomField.  # noqa: E501
        :type: list[str]
        """

        self._projects_codes = projects_codes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomField, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomField):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
