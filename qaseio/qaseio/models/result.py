# coding: utf-8

"""
    Qase.io API

    Qase API Specification.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@qase.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Result(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hash': 'str',
        'comment': 'str',
        'stacktrace': 'str',
        'run_id': 'int',
        'case_id': 'int',
        'steps': 'list[ResultSteps]',
        'status': 'str',
        'is_api_result': 'bool',
        'time_spent_ms': 'int',
        'end_time': 'datetime',
        'attachments': 'list[Attachment]'
    }

    attribute_map = {
        'hash': 'hash',
        'comment': 'comment',
        'stacktrace': 'stacktrace',
        'run_id': 'run_id',
        'case_id': 'case_id',
        'steps': 'steps',
        'status': 'status',
        'is_api_result': 'is_api_result',
        'time_spent_ms': 'time_spent_ms',
        'end_time': 'end_time',
        'attachments': 'attachments'
    }

    def __init__(self, hash=None, comment=None, stacktrace=None, run_id=None, case_id=None, steps=None, status=None, is_api_result=None, time_spent_ms=None, end_time=None, attachments=None):  # noqa: E501
        """Result - a model defined in Swagger"""  # noqa: E501
        self._hash = None
        self._comment = None
        self._stacktrace = None
        self._run_id = None
        self._case_id = None
        self._steps = None
        self._status = None
        self._is_api_result = None
        self._time_spent_ms = None
        self._end_time = None
        self._attachments = None
        self.discriminator = None
        if hash is not None:
            self.hash = hash
        if comment is not None:
            self.comment = comment
        if stacktrace is not None:
            self.stacktrace = stacktrace
        if run_id is not None:
            self.run_id = run_id
        if case_id is not None:
            self.case_id = case_id
        if steps is not None:
            self.steps = steps
        if status is not None:
            self.status = status
        if is_api_result is not None:
            self.is_api_result = is_api_result
        if time_spent_ms is not None:
            self.time_spent_ms = time_spent_ms
        if end_time is not None:
            self.end_time = end_time
        if attachments is not None:
            self.attachments = attachments

    @property
    def hash(self):
        """Gets the hash of this Result.  # noqa: E501


        :return: The hash of this Result.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this Result.


        :param hash: The hash of this Result.  # noqa: E501
        :type: str
        """

        self._hash = hash

    @property
    def comment(self):
        """Gets the comment of this Result.  # noqa: E501


        :return: The comment of this Result.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this Result.


        :param comment: The comment of this Result.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def stacktrace(self):
        """Gets the stacktrace of this Result.  # noqa: E501


        :return: The stacktrace of this Result.  # noqa: E501
        :rtype: str
        """
        return self._stacktrace

    @stacktrace.setter
    def stacktrace(self, stacktrace):
        """Sets the stacktrace of this Result.


        :param stacktrace: The stacktrace of this Result.  # noqa: E501
        :type: str
        """

        self._stacktrace = stacktrace

    @property
    def run_id(self):
        """Gets the run_id of this Result.  # noqa: E501


        :return: The run_id of this Result.  # noqa: E501
        :rtype: int
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id):
        """Sets the run_id of this Result.


        :param run_id: The run_id of this Result.  # noqa: E501
        :type: int
        """

        self._run_id = run_id

    @property
    def case_id(self):
        """Gets the case_id of this Result.  # noqa: E501


        :return: The case_id of this Result.  # noqa: E501
        :rtype: int
        """
        return self._case_id

    @case_id.setter
    def case_id(self, case_id):
        """Sets the case_id of this Result.


        :param case_id: The case_id of this Result.  # noqa: E501
        :type: int
        """

        self._case_id = case_id

    @property
    def steps(self):
        """Gets the steps of this Result.  # noqa: E501


        :return: The steps of this Result.  # noqa: E501
        :rtype: list[ResultSteps]
        """
        return self._steps

    @steps.setter
    def steps(self, steps):
        """Sets the steps of this Result.


        :param steps: The steps of this Result.  # noqa: E501
        :type: list[ResultSteps]
        """

        self._steps = steps

    @property
    def status(self):
        """Gets the status of this Result.  # noqa: E501


        :return: The status of this Result.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Result.


        :param status: The status of this Result.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def is_api_result(self):
        """Gets the is_api_result of this Result.  # noqa: E501


        :return: The is_api_result of this Result.  # noqa: E501
        :rtype: bool
        """
        return self._is_api_result

    @is_api_result.setter
    def is_api_result(self, is_api_result):
        """Sets the is_api_result of this Result.


        :param is_api_result: The is_api_result of this Result.  # noqa: E501
        :type: bool
        """

        self._is_api_result = is_api_result

    @property
    def time_spent_ms(self):
        """Gets the time_spent_ms of this Result.  # noqa: E501


        :return: The time_spent_ms of this Result.  # noqa: E501
        :rtype: int
        """
        return self._time_spent_ms

    @time_spent_ms.setter
    def time_spent_ms(self, time_spent_ms):
        """Sets the time_spent_ms of this Result.


        :param time_spent_ms: The time_spent_ms of this Result.  # noqa: E501
        :type: int
        """

        self._time_spent_ms = time_spent_ms

    @property
    def end_time(self):
        """Gets the end_time of this Result.  # noqa: E501


        :return: The end_time of this Result.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this Result.


        :param end_time: The end_time of this Result.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    @property
    def attachments(self):
        """Gets the attachments of this Result.  # noqa: E501


        :return: The attachments of this Result.  # noqa: E501
        :rtype: list[Attachment]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this Result.


        :param attachments: The attachments of this Result.  # noqa: E501
        :type: list[Attachment]
        """

        self._attachments = attachments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Result, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Result):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
